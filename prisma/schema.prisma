generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DB_URL")
  shadowDatabaseUrl = env("SHADOW_DB_URL")
}

model Monster {
  id                  Int                   @id @default(autoincrement())
  damage              Int
  hp                  Int
  weight              Int
  PlayerMonsterStatus PlayerMonsterStatus[]
}

model Player {
  id                  Int                   @id @default(autoincrement())
  email               String                @unique @db.VarChar(255)
  password            String                @db.VarChar(255)
  name                String                @db.VarChar(255)
  highScore           Int                   @default(0)
  PlayerMonsterStatus PlayerMonsterStatus[]
  PlayerProgress      PlayerProgress[]
  PlayerTower         PlayerTower[]
}

model PlayerMonsterStatus {
  id               Int     @id @default(autoincrement())
  playerId         Int
  monsterId        Int
  monsterUUID      Int
  monsterPosition  Int
  monsterCurrentHp Int
  Monster          Monster @relation(fields: [monsterId], references: [id], onDelete: Cascade)
  Player           Player  @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@index([monsterId])
  @@index([playerId])
}

model PlayerProgress {
  id               Int              @id @default(autoincrement())
  playerId         Int
  currentStageId   Int
  gold             Int
  score            Int
  currentHQId      Int
  currentHQHp      Int
  lastUpdate       DateTime
  SpartaHeadQuater SpartaHeadQuater @relation(fields: [currentHQId], references: [id], onDelete: Cascade)
  Stage            Stage            @relation(fields: [currentStageId], references: [id], onDelete: Cascade)
  Player           Player           @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@index([currentHQId], map: "PlayerProgress_currentHQId_fkey")
  @@index([currentStageId])
  @@index([playerId])
}

model PlayerTower {
  id             Int      @id @default(autoincrement())
  playerId       Int
  towerId        Int
  towerUUID      Int
  towerPosition  Int
  lastAttackTime DateTime
  Player         Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  Tower          Tower    @relation(fields: [towerId], references: [id], onDelete: Cascade)

  @@index([playerId])
  @@index([towerId])
}

model SpartaHeadQuater {
  id             Int              @id @default(autoincrement())
  maxHp          Int
  PlayerProgress PlayerProgress[]
}

model Stage {
  id               Int              @id @default(autoincrement())
  monsterCount     Int
  monsterTypeRange Int
  PlayerProgress   PlayerProgress[]
}

model Tower {
  id             Int           @id @default(autoincrement())
  attackCooltime BigInt
  damage         Int
  damageRange    Int
  PlayerTower    PlayerTower[]
}
